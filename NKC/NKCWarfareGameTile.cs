using NKM.Templet;
using UnityEngine;

namespace NKC;

public class NKCWarfareGameTile : MonoBehaviour
{
	public enum WARFARE_TILE_LAYER_0_TYPE
	{
		WTL0T_NONE,
		WTL0T_READY_NORMAL,
		WTL0T_READY_DIVE_POINT,
		WTL0T_READY_ASSULT_POINT,
		WTL0T_READY_ENEMY,
		WTL0T_PLAY_NORMAL,
		WTL0T_PLAY_ENEMY,
		WTL0T_PLAY_MOVABLE_USER_UNIT,
		WTL0T_PLAY_MOVABLE_USER_UNIT_SELECTED,
		WTL0T_PLAY_BATTLE,
		WTL0T_PLAY_USER_UNIT_TURN_FINISHED,
		WTL0T_PLAY_USER_UNIT_TURN_FINISHED_SELECTED,
		WTL0T_PLAY_USER_UNIT_POSSIBLE_ARRIVAL,
		WTL0T_PLAY_USER_RECOVERY_POINT
	}

	public enum WARFARE_TILE_LAYER_1_TYPE
	{
		WTL1T_NONE,
		WTL1T_EFFECT_REPAIR,
		WTL1T_EFFECT_SUPPLY,
		WTL1T_EFFECT_SERVICE,
		WTL1T_EFFECT_INCR
	}

	public enum WARFARE_TILE_LAYER_2_TYPE
	{
		WTL2T_NONE,
		WTL2T_WIN_ENTER,
		WTL2T_WIN_HOLD,
		WTL2T_LOSE_DEFENSE
	}

	public delegate void onClickPossibleArrivalTile(int tileIndex);

	public GameObject m_NUM_WARFARE_DUMMY;

	public GameObject m_NUM_WARFARE_TILE_A_NORMAL;

	public GameObject m_NUM_WARFARE_TILE_A_DIVE_POINT;

	public GameObject m_NUM_WARFARE_TILE_A_ASSULT_POINT;

	public GameObject m_NUM_WARFARE_TILE_A_RECOVERY_POINT;

	public GameObject m_NUM_WARFARE_TILE_A_ENEMY;

	public GameObject m_NUM_WARFARE_TILE_A_WC_ENTER;

	public GameObject m_NUM_WARFARE_TILE_A_WC_HOLD;

	public GameObject m_NUM_WARFARE_TILE_A_WC_DEFENSE;

	public GameObject m_NUM_WARFARE_TILE_B_NORMAL;

	public GameObject m_NUM_WARFARE_TILE_B_ENEMY;

	public GameObject m_NUM_WARFARE_TILE_B_READY;

	public GameObject m_NUM_WARFARE_TILE_B_READY_SELECT;

	public GameObject m_NUM_WARFARE_TILE_B_BATTLE;

	public GameObject m_NUM_WARFARE_TILE_B_DONE;

	public GameObject m_NUM_WARFARE_TILE_B_DONE_SELECT;

	public GameObject m_NUM_WARFARE_TILE_B_READY_GO;

	public GameObject m_NUM_WARFARE_TILE_EFFECT_REPAIR;

	public GameObject m_NUM_WARFARE_TILE_EFFECT_SUPPLY;

	public GameObject m_NUM_WARFARE_TILE_EFFECT_SERVICE;

	public GameObject m_NUM_WARFARE_TILE_EFFECT_INCR;

	public NKCUIComButton m_btn_M_WARFARE_TILE_B_READY_GO;

	private WARFARE_TILE_LAYER_0_TYPE m_WARFARE_TILE_LAYER_0_TYPE = WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_NORMAL;

	private WARFARE_TILE_LAYER_1_TYPE m_WARFARE_TILE_LAYER_1_TYPE;

	private WARFARE_TILE_LAYER_2_TYPE m_WARFARE_TILE_LAYER_2_TYPE;

	private onClickPossibleArrivalTile m_OnClickPossibleArrivalTile;

	private int m_TileIndex = -1;

	private NKCAssetInstanceData m_instance;

	public static NKCWarfareGameTile GetNewInstance(int tileIndex, Transform parent, onClickPossibleArrivalTile _onClickPossibleArrivalTile)
	{
		NKCAssetInstanceData nKCAssetInstanceData = NKCAssetResourceManager.OpenInstance<GameObject>("AB_UI_NKM_UI_WARFARE", "NUM_WARFARE_TILE");
		NKCWarfareGameTile component = nKCAssetInstanceData.m_Instant.GetComponent<NKCWarfareGameTile>();
		if (component == null)
		{
			Debug.LogError("NKCWarfareGameTile Prefab null!");
			return null;
		}
		component.m_instance = nKCAssetInstanceData;
		component.m_OnClickPossibleArrivalTile = _onClickPossibleArrivalTile;
		component.m_TileIndex = tileIndex;
		component.m_btn_M_WARFARE_TILE_B_READY_GO.PointerClick.RemoveAllListeners();
		component.m_btn_M_WARFARE_TILE_B_READY_GO.PointerClick.AddListener(component.OnClickPossibleArrivalTile);
		if (parent != null)
		{
			component.transform.SetParent(parent);
			component.transform.localScale = new Vector3(1f, 1f, 1f);
		}
		return component;
	}

	public void Close()
	{
		NKCAssetResourceManager.CloseInstance(m_instance);
		m_instance = null;
	}

	public void OnClickPossibleArrivalTile()
	{
		if (m_OnClickPossibleArrivalTile != null)
		{
			m_OnClickPossibleArrivalTile(m_TileIndex);
		}
	}

	public void SetTileLayer0Type(WARFARE_TILE_LAYER_0_TYPE eWARFARE_TILE_LAYER_0_TYPE)
	{
		if (eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_NONE)
		{
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_DUMMY, bValue: false);
		}
		else
		{
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_DUMMY, bValue: true);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_NORMAL, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_NORMAL);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_DIVE_POINT, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_DIVE_POINT);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_ASSULT_POINT, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_ASSULT_POINT);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_RECOVERY_POINT, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_RECOVERY_POINT);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_ENEMY, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_ENEMY);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_NORMAL, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_NORMAL);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_ENEMY, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_ENEMY);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_READY, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_MOVABLE_USER_UNIT);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_READY_SELECT, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_MOVABLE_USER_UNIT_SELECTED);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_BATTLE, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_BATTLE);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_DONE, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_UNIT_TURN_FINISHED);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_DONE_SELECT, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_UNIT_TURN_FINISHED_SELECTED);
			NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_B_READY_GO, eWARFARE_TILE_LAYER_0_TYPE == WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_UNIT_POSSIBLE_ARRIVAL);
		}
		m_WARFARE_TILE_LAYER_0_TYPE = eWARFARE_TILE_LAYER_0_TYPE;
	}

	public GameObject GetActiveGameObject()
	{
		return m_WARFARE_TILE_LAYER_0_TYPE switch
		{
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_DIVE_POINT => m_NUM_WARFARE_TILE_A_DIVE_POINT, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_ASSULT_POINT => m_NUM_WARFARE_TILE_A_ASSULT_POINT, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_READY_ENEMY => m_NUM_WARFARE_TILE_A_ENEMY, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_NORMAL => m_NUM_WARFARE_TILE_B_NORMAL, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_ENEMY => m_NUM_WARFARE_TILE_B_ENEMY, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_MOVABLE_USER_UNIT => m_NUM_WARFARE_TILE_B_READY, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_MOVABLE_USER_UNIT_SELECTED => m_NUM_WARFARE_TILE_B_READY_SELECT, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_BATTLE => m_NUM_WARFARE_TILE_B_BATTLE, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_UNIT_TURN_FINISHED => m_NUM_WARFARE_TILE_B_DONE, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_UNIT_TURN_FINISHED_SELECTED => m_NUM_WARFARE_TILE_B_DONE_SELECT, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_UNIT_POSSIBLE_ARRIVAL => m_NUM_WARFARE_TILE_B_READY_GO, 
			WARFARE_TILE_LAYER_0_TYPE.WTL0T_PLAY_USER_RECOVERY_POINT => m_NUM_WARFARE_TILE_A_RECOVERY_POINT, 
			_ => m_NUM_WARFARE_TILE_A_NORMAL, 
		};
	}

	public WARFARE_TILE_LAYER_0_TYPE Get_WARFARE_TILE_LAYER_0_TYPE()
	{
		return m_WARFARE_TILE_LAYER_0_TYPE;
	}

	public void SetTileLayer1Type(NKM_WARFARE_MAP_TILE_TYPE _NKM_WARFARE_MAP_TILE_TYPE)
	{
		switch (_NKM_WARFARE_MAP_TILE_TYPE)
		{
		case NKM_WARFARE_MAP_TILE_TYPE.NWMTT_REPAIR:
			SetTileLayer1Type(WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_REPAIR);
			break;
		case NKM_WARFARE_MAP_TILE_TYPE.NWMTT_RESUPPLY:
			SetTileLayer1Type(WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_SUPPLY);
			break;
		case NKM_WARFARE_MAP_TILE_TYPE.NWMTT_INCR:
			SetTileLayer1Type(WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_INCR);
			break;
		case NKM_WARFARE_MAP_TILE_TYPE.NWNTT_SERVICE:
			SetTileLayer1Type(WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_SERVICE);
			break;
		default:
			SetTileLayer1Type(WARFARE_TILE_LAYER_1_TYPE.WTL1T_NONE);
			break;
		}
	}

	public void SetTileLayer1Type(WARFARE_TILE_LAYER_1_TYPE eWARFARE_TILE_LAYER_1_TYPE)
	{
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_EFFECT_REPAIR, eWARFARE_TILE_LAYER_1_TYPE == WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_REPAIR);
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_EFFECT_SUPPLY, eWARFARE_TILE_LAYER_1_TYPE == WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_SUPPLY);
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_EFFECT_SERVICE, eWARFARE_TILE_LAYER_1_TYPE == WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_SERVICE);
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_EFFECT_INCR, eWARFARE_TILE_LAYER_1_TYPE == WARFARE_TILE_LAYER_1_TYPE.WTL1T_EFFECT_INCR);
		m_WARFARE_TILE_LAYER_1_TYPE = eWARFARE_TILE_LAYER_1_TYPE;
	}

	public WARFARE_TILE_LAYER_1_TYPE Get_WARFARE_TILE_LAYER_1_TYPE()
	{
		return m_WARFARE_TILE_LAYER_1_TYPE;
	}

	public void SetTileLayer2Type(WARFARE_GAME_CONDITION _NKM_WARFARE_MAP_TILE_WIN_TYPE, WARFARE_GAME_CONDITION _NKM_WARFARE_MAP_TILE_LOSE_TYPE)
	{
		switch (_NKM_WARFARE_MAP_TILE_WIN_TYPE)
		{
		case WARFARE_GAME_CONDITION.WFC_TILE_ENTER:
			SetTileLayer2Type(WARFARE_TILE_LAYER_2_TYPE.WTL2T_WIN_ENTER);
			return;
		case WARFARE_GAME_CONDITION.WFC_PHASE_TILE_HOLD:
			SetTileLayer2Type(WARFARE_TILE_LAYER_2_TYPE.WTL2T_WIN_HOLD);
			return;
		}
		if (_NKM_WARFARE_MAP_TILE_LOSE_TYPE == WARFARE_GAME_CONDITION.WFC_TILE_ENTER)
		{
			SetTileLayer2Type(WARFARE_TILE_LAYER_2_TYPE.WTL2T_LOSE_DEFENSE);
		}
		else
		{
			SetTileLayer2Type(WARFARE_TILE_LAYER_2_TYPE.WTL2T_NONE);
		}
	}

	public void SetTileLayer2Type(WARFARE_TILE_LAYER_2_TYPE eWARFARE_TILE_LAYER_2_TYPE)
	{
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_WC_ENTER, eWARFARE_TILE_LAYER_2_TYPE == WARFARE_TILE_LAYER_2_TYPE.WTL2T_WIN_ENTER);
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_WC_HOLD, eWARFARE_TILE_LAYER_2_TYPE == WARFARE_TILE_LAYER_2_TYPE.WTL2T_WIN_HOLD);
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_TILE_A_WC_DEFENSE, eWARFARE_TILE_LAYER_2_TYPE == WARFARE_TILE_LAYER_2_TYPE.WTL2T_LOSE_DEFENSE);
		m_WARFARE_TILE_LAYER_2_TYPE = eWARFARE_TILE_LAYER_2_TYPE;
	}

	public WARFARE_TILE_LAYER_2_TYPE Get_WARFARE_TILE_LAYER_2_TYPE()
	{
		return m_WARFARE_TILE_LAYER_2_TYPE;
	}

	private void Update()
	{
		_ = m_NUM_WARFARE_DUMMY.activeSelf;
	}

	public void SetDummyActive(bool bSet)
	{
		NKCUtil.SetGameobjectActive(m_NUM_WARFARE_DUMMY, bSet);
	}
}
